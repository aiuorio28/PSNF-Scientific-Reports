% Code to obtain Fig. 6(b)

%% Effect of seeds dispersal on amplitude: Simulation of the PSNF model on a 1D domain

% Variables describing the density of: S (seeds), N (seedlings), A (adults), I (inhibitor)

% Equations:
% dS/dt = dSS*Delta S + gS*A - kS*S
% dN/dt = gN*S/(1+beta*exp(rT*I)) - kN*N - gA*N*(1-A/Amax) - rP*N*I
% dA/dt = (gA*N+cA*A)*(1-A/Amax) - kA*A
% dI/dt = dII*Delta I + cT*A - kI*I

clear all
close all
tic

% System discretisation
DeltaX=0.1; % 0.1

% Parameter values (fixed)
gS=0.033; 
kS=0.33; 
gN=5; 
rT=34; 
beta=10^(-5);
kN=0.5; 
rP=1; 
gA=0.2; 
cA=0.25; 
Amax=30; 
kA=0.01; 
cT=1; 
kI=0.7; 
dII=0.5;

% Parameter values (variable)
parset=[0.1 0.1; 0.1 2; 34 1; 68 0.1; 68 2]; % couples of (rT, rP) values
dSS_vec=0:0.3:3; 

% Tolerances
eps=0.1;
perc=0.03;
tA=1/10000000;
tN=1/10000000;
q=1/100;

% Number of grid cells
m=600;
NX=m;

% Timesteps
dt=0.001;     % timestep
Time=0;      % begin time
EndIime=8;    % end time
PlotStep=1;
PlotTime=PlotStep;
TF=EndIime/dt;

% Vectors to store infos
tfin_vec=zeros(1,length(dSS_vec));
tfin_ind=zeros(1,length(dSS_vec));
ampl=zeros(length(dSS_vec),TF);
maxampl_vec=zeros(1,length(dSS_vec));

Sfin=zeros(length(dSS_vec),m);
Nfin=zeros(length(dSS_vec),m);
Afin=zeros(length(dSS_vec),m);
Ifin=zeros(length(dSS_vec),m);

Sseries=zeros(length(dSS_vec),m,TF-1);
Nseries=zeros(length(dSS_vec),m,TF-1);
Aseries=zeros(length(dSS_vec),m,TF-1);
Iseries=zeros(length(dSS_vec),m,TF-1);

% Parameter loops

for ind2=1:length(parset)
        rT=parset(ind2,1);
        rP=parset(ind2,2);
for index=1:size(dSS_vec,2)
    dSS=dSS_vec(index);
    
    % Simulation loop
    Time=0;      % begin time
    it=1;
    PlotTime=PlotStep; % (d)
    
    % Initialisation
    S = zeros(1,m);
    N = zeros(1,m);
    A = zeros(1,m);
    I = zeros(1,m);
    dS = zeros(1,m); % reaction term for S
    dN = zeros(1,m); % reaction term for N
    dA = zeros(1,m); % reaction term for A
    dI = zeros(1,m); % reaction term for T
    NetS = zeros(1,m); % diffusion term for S
    NetI = zeros(1,m); % diffusion term for T
    
    % Boundary conditions
    FXS = zeros(1,NX+1);		% bound.con. no flow in/out to X-direction
    FXI = zeros(1,NX+1);		% bound.con. no flow in/out to X-direction
    
    % Initial state
    % S
    for i=1:m
        S(i)=exp(-m/4 + i - i^2/m);
    end
    % N
    N(:)=0;
    % A
    A(:)=0;
    % I
    I(:)=0;
    
    
    % Timesteps
    while Time<=EndIime
        
        % Reaction
        
        dS = gS.*A - kS.*S;
        dN = gN.*S./(1+beta.*exp(rT.*I)) - kN.*N - gA.*N.*(1-A./Amax) - rP.*N.*I;
        dA = (gA.*N+cA.*A).*(1-A./Amax) - kA.*A;
        dI = cT.*A - kI.*I;
        
        % Diffusion
        
        % Flow in x-direction
        FXS(2:NX)=(S(2:NX)-S(1:NX-1))/DeltaX;
        FXI(2:NX)=(I(2:NX)-I(1:NX-1))/DeltaX;
        
        % Netflow
        NetS=dSS*(FXS(2:NX+1)-FXS(1:NX))/DeltaX;
        NetI=dII*(FXI(2:NX+1)-FXI(1:NX))/DeltaX;
        
        % Update
        S=S+(NetS+dS)*dt;
        N=N+dN*dt;
        A=A+dA*dt;
        I=I+(NetI+dI)*dt;
        
        % Quantities for maximum amplitude
        maxN=max(N);
        xMaxN=find(abs(N-max(N))<tN,1,'last'); % spatial location of the peak on the right-half of the domain
        xmid=round((m/2+xMaxN)/2,0); % midpoint between the domain center and xMaxN
        
        if (N(m/2) <= N(xmid)) && (N(xmid) <= maxN)
            ampl(index,it)=abs(maxN-N(m/2));  % amplitude of the seedlings profile
        end
        
        Time=Time+dt;
        
        Sseries(index,:,it)=S(:);
        Nseries(index,:,it)=N(:);
        Aseries(index,:,it)=A(:);
        Iseries(index,:,it)=I(:);
        
        it=it+1;
        
    end
    
    maxampl_vec(index) = max(ampl(index,:)); % maximum amplitude of the seedlings profile
    tfin_vec(index) = (find(ampl(index,:)==max(ampl(index,:)),1,'first'))*dt;  % time step in which the maximum amplitude profile of the seedlings profile is reached
    tfin_ind(index) = tfin_vec(index)/dt; % converted time in which the maximum amplitude profile of the seedlings profile is reached
    
    Sfin(index,:)=Sseries(index,:,tfin_vec(index)/dt); % S profile at the time of maximum amplitude for seedlings
    Nfin(index,:)=Nseries(index,:,tfin_vec(index)/dt); % N profile at the time of maximum amplitude for seedlings
    Afin(index,:)=Aseries(index,:,tfin_vec(index)/dt); % A profile at the time of maximum amplitude for seedlings
    Ifin(index,:)=Iseries(index,:,tfin_vec(index)/dt); % I profile at the time of maximum amplitude for seedlings
    
    SSS = ['save MatrixSeriespcfin_1D_maxampl_S_diff1_dSS=' num2str(dSS) '.mat Sfin'];
    eval(SSS)
    
    NNN = ['save MatrixSeriespcfin_1D_maxampl_N_diff1_dSS=' num2str(dSS) '.mat Nfin'];
    eval(NNN)
    
    AAA = ['save MatrixSeriespcfin_1D_maxampl_A_diff1_dSS=' num2str(dSS) '.mat Afin'];
    eval(AAA)
    
    III = ['save MatrixSeriespcfin_1D_maxampl_I_diff1_dSS=' num2str(dSS) '.mat Ifin'];
    eval(III)
end
toc

%% Plots

lcol={[0 0 0], [0.5 0 0.5]};

scatter(dSS_vec,maxampl_vec)
axis square;
hold on;
xlabel('Seed dispersal $d_S$','FontSize',12,'Interpreter','latex')
ylabel('Amplitude (${\rm kg/m^2}$)','FontSize',12,'Interpreter','latex')

Legend=cell(length(parset),1);
for j=1:length(parset)
    Legend{j}=strcat('$r_T$ = ', num2str(parset(j,1)), ', $r_P$ = ', num2str(parset(j,2)));
end
leg=legend(Legend,'Location','southeast','Interpreter','latex');
end
